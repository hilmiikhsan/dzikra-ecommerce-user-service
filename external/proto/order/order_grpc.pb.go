// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.29.3
// source: order.proto

package order

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OrderServiceClient is the client API for OrderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderServiceClient interface {
	// Create order using a template
	CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*CreateOrderResponse, error)
	GetListOrder(ctx context.Context, in *GetListOrderRequest, opts ...grpc.CallOption) (*GetListOrderResponse, error)
	GetOrderById(ctx context.Context, in *GetOrderByIdRequest, opts ...grpc.CallOption) (*GetOrderByIdResponse, error)
	GetListOrderTransaction(ctx context.Context, in *GetListOrderRequest, opts ...grpc.CallOption) (*GetListOrderResponse, error)
	UpdateOrderShippingNumber(ctx context.Context, in *UpdateOrderShippingNumberRequest, opts ...grpc.CallOption) (*UpdateOrderShippingNumberResponse, error)
	UpdateOrderStatusTransaction(ctx context.Context, in *UpdateOrderStatusTransactionRequest, opts ...grpc.CallOption) (*UpdateOrderStatusTransactionResponse, error)
	GetOrderItemsByOrderID(ctx context.Context, in *GetOrderItemsByOrderIDRequest, opts ...grpc.CallOption) (*GetOrderItemsByOrderIDResponse, error)
}

type orderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderServiceClient(cc grpc.ClientConnInterface) OrderServiceClient {
	return &orderServiceClient{cc}
}

func (c *orderServiceClient) CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*CreateOrderResponse, error) {
	out := new(CreateOrderResponse)
	err := c.cc.Invoke(ctx, "/order.OrderService/CreateOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetListOrder(ctx context.Context, in *GetListOrderRequest, opts ...grpc.CallOption) (*GetListOrderResponse, error) {
	out := new(GetListOrderResponse)
	err := c.cc.Invoke(ctx, "/order.OrderService/GetListOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetOrderById(ctx context.Context, in *GetOrderByIdRequest, opts ...grpc.CallOption) (*GetOrderByIdResponse, error) {
	out := new(GetOrderByIdResponse)
	err := c.cc.Invoke(ctx, "/order.OrderService/GetOrderById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetListOrderTransaction(ctx context.Context, in *GetListOrderRequest, opts ...grpc.CallOption) (*GetListOrderResponse, error) {
	out := new(GetListOrderResponse)
	err := c.cc.Invoke(ctx, "/order.OrderService/GetListOrderTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) UpdateOrderShippingNumber(ctx context.Context, in *UpdateOrderShippingNumberRequest, opts ...grpc.CallOption) (*UpdateOrderShippingNumberResponse, error) {
	out := new(UpdateOrderShippingNumberResponse)
	err := c.cc.Invoke(ctx, "/order.OrderService/UpdateOrderShippingNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) UpdateOrderStatusTransaction(ctx context.Context, in *UpdateOrderStatusTransactionRequest, opts ...grpc.CallOption) (*UpdateOrderStatusTransactionResponse, error) {
	out := new(UpdateOrderStatusTransactionResponse)
	err := c.cc.Invoke(ctx, "/order.OrderService/UpdateOrderStatusTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetOrderItemsByOrderID(ctx context.Context, in *GetOrderItemsByOrderIDRequest, opts ...grpc.CallOption) (*GetOrderItemsByOrderIDResponse, error) {
	out := new(GetOrderItemsByOrderIDResponse)
	err := c.cc.Invoke(ctx, "/order.OrderService/GetOrderItemsByOrderID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderServiceServer is the server API for OrderService service.
// All implementations must embed UnimplementedOrderServiceServer
// for forward compatibility
type OrderServiceServer interface {
	// Create order using a template
	CreateOrder(context.Context, *CreateOrderRequest) (*CreateOrderResponse, error)
	GetListOrder(context.Context, *GetListOrderRequest) (*GetListOrderResponse, error)
	GetOrderById(context.Context, *GetOrderByIdRequest) (*GetOrderByIdResponse, error)
	GetListOrderTransaction(context.Context, *GetListOrderRequest) (*GetListOrderResponse, error)
	UpdateOrderShippingNumber(context.Context, *UpdateOrderShippingNumberRequest) (*UpdateOrderShippingNumberResponse, error)
	UpdateOrderStatusTransaction(context.Context, *UpdateOrderStatusTransactionRequest) (*UpdateOrderStatusTransactionResponse, error)
	GetOrderItemsByOrderID(context.Context, *GetOrderItemsByOrderIDRequest) (*GetOrderItemsByOrderIDResponse, error)
	mustEmbedUnimplementedOrderServiceServer()
}

// UnimplementedOrderServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOrderServiceServer struct {
}

func (UnimplementedOrderServiceServer) CreateOrder(context.Context, *CreateOrderRequest) (*CreateOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrder not implemented")
}
func (UnimplementedOrderServiceServer) GetListOrder(context.Context, *GetListOrderRequest) (*GetListOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListOrder not implemented")
}
func (UnimplementedOrderServiceServer) GetOrderById(context.Context, *GetOrderByIdRequest) (*GetOrderByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderById not implemented")
}
func (UnimplementedOrderServiceServer) GetListOrderTransaction(context.Context, *GetListOrderRequest) (*GetListOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListOrderTransaction not implemented")
}
func (UnimplementedOrderServiceServer) UpdateOrderShippingNumber(context.Context, *UpdateOrderShippingNumberRequest) (*UpdateOrderShippingNumberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrderShippingNumber not implemented")
}
func (UnimplementedOrderServiceServer) UpdateOrderStatusTransaction(context.Context, *UpdateOrderStatusTransactionRequest) (*UpdateOrderStatusTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrderStatusTransaction not implemented")
}
func (UnimplementedOrderServiceServer) GetOrderItemsByOrderID(context.Context, *GetOrderItemsByOrderIDRequest) (*GetOrderItemsByOrderIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderItemsByOrderID not implemented")
}
func (UnimplementedOrderServiceServer) mustEmbedUnimplementedOrderServiceServer() {}

// UnsafeOrderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderServiceServer will
// result in compilation errors.
type UnsafeOrderServiceServer interface {
	mustEmbedUnimplementedOrderServiceServer()
}

func RegisterOrderServiceServer(s grpc.ServiceRegistrar, srv OrderServiceServer) {
	s.RegisterService(&OrderService_ServiceDesc, srv)
}

func _OrderService_CreateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).CreateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.OrderService/CreateOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).CreateOrder(ctx, req.(*CreateOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetListOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetListOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.OrderService/GetListOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetListOrder(ctx, req.(*GetListOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetOrderById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetOrderById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.OrderService/GetOrderById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetOrderById(ctx, req.(*GetOrderByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetListOrderTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetListOrderTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.OrderService/GetListOrderTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetListOrderTransaction(ctx, req.(*GetListOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_UpdateOrderShippingNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrderShippingNumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).UpdateOrderShippingNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.OrderService/UpdateOrderShippingNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).UpdateOrderShippingNumber(ctx, req.(*UpdateOrderShippingNumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_UpdateOrderStatusTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrderStatusTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).UpdateOrderStatusTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.OrderService/UpdateOrderStatusTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).UpdateOrderStatusTransaction(ctx, req.(*UpdateOrderStatusTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetOrderItemsByOrderID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderItemsByOrderIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetOrderItemsByOrderID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.OrderService/GetOrderItemsByOrderID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetOrderItemsByOrderID(ctx, req.(*GetOrderItemsByOrderIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrderService_ServiceDesc is the grpc.ServiceDesc for OrderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "order.OrderService",
	HandlerType: (*OrderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrder",
			Handler:    _OrderService_CreateOrder_Handler,
		},
		{
			MethodName: "GetListOrder",
			Handler:    _OrderService_GetListOrder_Handler,
		},
		{
			MethodName: "GetOrderById",
			Handler:    _OrderService_GetOrderById_Handler,
		},
		{
			MethodName: "GetListOrderTransaction",
			Handler:    _OrderService_GetListOrderTransaction_Handler,
		},
		{
			MethodName: "UpdateOrderShippingNumber",
			Handler:    _OrderService_UpdateOrderShippingNumber_Handler,
		},
		{
			MethodName: "UpdateOrderStatusTransaction",
			Handler:    _OrderService_UpdateOrderStatusTransaction_Handler,
		},
		{
			MethodName: "GetOrderItemsByOrderID",
			Handler:    _OrderService_GetOrderItemsByOrderID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "order.proto",
}
