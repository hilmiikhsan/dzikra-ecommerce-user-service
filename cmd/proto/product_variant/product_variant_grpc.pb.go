// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.29.3
// source: product_variant.proto

package product_variant

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProductVariantServiceClient is the client API for ProductVariantService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductVariantServiceClient interface {
	GetProductVariantStock(ctx context.Context, in *GetProductVariantStockRequest, opts ...grpc.CallOption) (*GetProductVariantStockResponse, error)
}

type productVariantServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProductVariantServiceClient(cc grpc.ClientConnInterface) ProductVariantServiceClient {
	return &productVariantServiceClient{cc}
}

func (c *productVariantServiceClient) GetProductVariantStock(ctx context.Context, in *GetProductVariantStockRequest, opts ...grpc.CallOption) (*GetProductVariantStockResponse, error) {
	out := new(GetProductVariantStockResponse)
	err := c.cc.Invoke(ctx, "/product_variant.ProductVariantService/GetProductVariantStock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductVariantServiceServer is the server API for ProductVariantService service.
// All implementations must embed UnimplementedProductVariantServiceServer
// for forward compatibility
type ProductVariantServiceServer interface {
	GetProductVariantStock(context.Context, *GetProductVariantStockRequest) (*GetProductVariantStockResponse, error)
	mustEmbedUnimplementedProductVariantServiceServer()
}

// UnimplementedProductVariantServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProductVariantServiceServer struct {
}

func (UnimplementedProductVariantServiceServer) GetProductVariantStock(context.Context, *GetProductVariantStockRequest) (*GetProductVariantStockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductVariantStock not implemented")
}
func (UnimplementedProductVariantServiceServer) mustEmbedUnimplementedProductVariantServiceServer() {}

// UnsafeProductVariantServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductVariantServiceServer will
// result in compilation errors.
type UnsafeProductVariantServiceServer interface {
	mustEmbedUnimplementedProductVariantServiceServer()
}

func RegisterProductVariantServiceServer(s grpc.ServiceRegistrar, srv ProductVariantServiceServer) {
	s.RegisterService(&ProductVariantService_ServiceDesc, srv)
}

func _ProductVariantService_GetProductVariantStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductVariantStockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductVariantServiceServer).GetProductVariantStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product_variant.ProductVariantService/GetProductVariantStock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductVariantServiceServer).GetProductVariantStock(ctx, req.(*GetProductVariantStockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductVariantService_ServiceDesc is the grpc.ServiceDesc for ProductVariantService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductVariantService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "product_variant.ProductVariantService",
	HandlerType: (*ProductVariantServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProductVariantStock",
			Handler:    _ProductVariantService_GetProductVariantStock_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "product_variant.proto",
}
